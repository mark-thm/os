package:
  name: apache2
  version: 2.4.62
  epoch: 1
  description: "Apache HTTP Server"
  copyright:
    - license: Apache-2.0

environment:
  contents:
    packages:
      - apr-util-dev
      - autoconf
      - automake
      - brotli-dev
      - build-base
      - libapr-dev
      - libxml2-dev
      - lua5.4-dev
      - nghttp2-dev
      - openssl-dev
      - pcre2-dev
      - readline-dev
      - wolfi-base
      - zlib-dev

pipeline:
  - uses: git-checkout
    with:
      expected-commit: f4c1e18ead5d642698034b831121cbb82b55f60e
      repository: https://github.com/apache/httpd
      tag: ${{package.version}}

  - runs: |
      set -x
      ./buildconf --with-apr=/usr/bin/apr-1-config
      mv configure.in configure.ac

  - uses: autoconf/configure
    with:
      opts: |
        --prefix=/ \
        --enable-layout=Debian \
        --enable-so \
        --enable-suexec \
        --with-suexec-caller=www-data \
        --with-suexec-docroot=/var/www \
        --with-suexec-logfile=/var/log/apache2/suexec.log \
        --with-suexec-bin=/usr/sbin/suexec \
        --with-suexec-uidmin=99 \
        --with-suexec-gidmin=99 \
        --with-apr=/usr/bin/apr-1-config \
        --with-apr-util=/usr/bin/apu-1-config \
        --with-pcre=/usr \
        --enable-mods-shared=all \
        --enable-mpms-shared=all \
        --with-mpm=prefork \
        --enable-ssl \
        --with-ssl \
        --enable-proxy \
        --enable-cache \
        --enable-disk-cache \
        --enable-mem-cache \
        --enable-file-cache \
        --enable-ldap \
        --enable-authnz-ldap \
        --enable-cgid \
        --enable-cgi \
        --enable-authn-anon \
        --enable-authn-alias \
        --disable-imagemap \
        --enable-proxy-connect \
        --enable-proxy-http \
        --enable-proxy-ftp \
        --enable-deflate \
        --enable-dbd \
        --enable-exception-hook \
        --enable-dav \
        --enable-dav-fs \
        --enable-dav-lock

  - uses: autoconf/make

  - uses: autoconf/make-install

  - runs: |
      set -x
      # Modify User/Group and verify changes are applied.
      sed -ri \
        -e 's!^(\s*User)\s+daemon\s*$!\1 www-data!g' \
        -e 's!^(\s*Group)\s+daemon\s*$!\1 www-data!g' \
        "${{targets.destdir}}"/etc/httpd.conf

      grep -E '^\s*User www-data$' "${{targets.destdir}}"/etc/httpd.conf;
      grep -E '^\s*Group www-data$' "${{targets.destdir}}"/etc/httpd.conf;

      # Modify CustomLog/ErrorLog and verify changes are applied
      sed -ri \
        -e 's!^(\s*CustomLog)\s+\S+!\1 /proc/self/fd/1!g' \
        -e 's!^(\s*ErrorLog)\s+\S+!\1 /proc/self/fd/2!g' \
        "${{targets.destdir}}"/etc/httpd.conf \
        "${{targets.destdir}}"/etc/extra/httpd-ssl.conf;

      grep -E '^\s*ErrorLog /proc/self/fd/2$' "${{targets.destdir}}"/etc/httpd.conf;
      grep -E '^\s*ErrorLog /proc/self/fd/2$' "${{targets.destdir}}"/etc/extra/httpd-ssl.conf;
      grep -E '^\s*CustomLog /proc/self/fd/1' "${{targets.destdir}}"/etc/httpd.conf;
      grep -E '^\s*CustomLog /proc/self/fd/1' "${{targets.destdir}}"/etc/extra/httpd-ssl.conf;

      # Modify TransferLog and verify changes are applied
      sed -ri \
        -e 's!^(\s*TransferLog)\s+\S+!\1 /proc/self/fd/1!g' \
        "${{targets.destdir}}"/etc/extra/httpd-ssl.conf;

      grep -E '^\s*TransferLog /proc/self/fd/1$' "${{targets.destdir}}"/etc/extra/httpd-ssl.conf;

  - uses: strip

subpackages:
  - name: ${{package.name}}-dev
    description: "Apache HTTP Server (development headers)"
    pipeline:
      - uses: split/dev
    dependencies:
      runtime:
        - perl
        - apr-util-dev

  - name: ${{package.name}}-doc
    description: "Apache HTTP Server (documentation)"
    pipeline:
      - uses: split/manpages
      - runs: |
          set -x
          mkdir -p "${{targets.subpkgdir}}"/usr/share/doc/apache2
          mv "${{targets.destdir}}"/usr/share/apache2/default-site/htdocs/manual "${{targets.subpkgdir}}"/usr/share/doc/apache2/

  - name: ${{package.name}}-utils
    description: "Apache HTTP Server (utilities)"
    pipeline:
      - runs: |
          set -x
          # Move utilities to usr/bin
          mkdir -p "${{targets.subpkgdir}}"/usr/bin
          for i in ab htdbm htdigest htpasswd httxt2dbm logresolve; do
            mv "${{targets.destdir}}"/usr/bin/$i "${{targets.subpkgdir}}"/usr/bin/
          done
          # Move utilities to usr/sbin
          mkdir -p "${{targets.subpkgdir}}"/usr/sbin
          for i in checkgid fcgistarter htcacheclean rotatelogs; do
            mv "${{targets.destdir}}"/usr/sbin/$i "${{targets.subpkgdir}}"/usr/sbin/
          done

  - name: ${{package.name}}-data
    description: "Apache HTTP Server (data files)"
    pipeline:
      - runs: |
          mkdir -p "${{targets.subpkgdir}}"/usr/share/apache2
          mv "${{targets.destdir}}"/usr/share/apache2/icons "${{targets.subpkgdir}}"/usr/share/apache2/
          mv "${{targets.destdir}}"/usr/share/apache2/error "${{targets.subpkgdir}}"/usr/share/apache2/

  - name: ${{package.name}}-oci-entrypoint
    description: "OCI entrypoint for apache2"
    dependencies:
      runtime:
        - dash-binsh
    pipeline:
      - runs: |
          install -Dm755 entrypoint.sh "${{targets.subpkgdir}}"/usr/bin/entrypoint.sh

test:
  environment:
    contents:
      packages:
        - curl
  pipeline:
    - runs: |
        adduser -D -H www-data

        httpd -M

        mkdir -p /usr/local/apache2/conf
        mkdir -p /usr/local/apache2/htdocs
        mkdir -p /usr/local/apache2/logs
        mkdir -p /usr/local/apache2/var/run/apache2

        # Set the document root path based on the system
        DOC_ROOT="/usr/local/apache2/htdocs"
        CONF_FILE="/usr/local/apache2/conf/httpd.conf"

        # Add the required configuration to allow access for all
        echo "Modifying Apache configuration to allow access to all..."
        cat <<EOL >> "$CONF_FILE"
        ServerRoot "/usr/local/apache2"
        Listen 80
        ServerName localhost:8080

        # Load required modules
        LoadModule mpm_prefork_module /usr/lib/apache2/modules/mod_mpm_prefork.so
        LoadModule authz_core_module /usr/lib/apache2/modules/mod_authz_core.so
        LoadModule log_config_module /usr/lib/apache2/modules/mod_log_config.so
        LoadModule unixd_module /usr/lib/apache2/modules/mod_unixd.so

        DocumentRoot "/usr/local/apache2/htdocs"

        # Custom configuration to allow access to all
        <Directory "$DOC_ROOT">
            Options Indexes FollowSymLinks
            AllowOverride None
            Require all granted
        </Directory>

        EOL

        # Ensure correct permissions on the document root
        echo "Setting permissions for the document root..."
        chmod o+rx /usr/local/apache2 "$DOC_ROOT"
        chown -R $(whoami):$(whoami) "$DOC_ROOT"
        chmod -R 755 "$DOC_ROOT"

        echo "<html><body><h1>Apache Test Page</h1></body></html>" > /usr/local/apache2/htdocs/test.html


        # Start httpd using the custom configuration
        echo "Starting httpd..."
        httpd -f "$CONF_FILE" -DFOREGROUND &
        httpd_pid=$!

        # Give httpd some time to start
        sleep 5

        # Test if httpd is running
        if pgrep httpd > /dev/null; then
            echo "PASS: Apache (httpd) is running."
        else
            echo "FAIL: Apache (httpd) is not running."
            kill "$httpd_pid"
            exit 1
        fi

        # Test serving the page using curl
        echo "Testing the page with curl..."
        curl -v http://localhost/test.html 2>&1 | tee /tmp/curl_output.log

        if grep "200 OK" /tmp/curl_output.log > /dev/null; then
            echo "PASS: Page served successfully."
        else
            echo "FAIL: Could not retrieve the page. Check curl output:"
            cat /tmp/curl_output.log
        fi

        # Stop httpd
        echo "Stopping httpd..."
        kill "$httpd_pid"

update:
  enabled: true
  github:
    identifier: apache/httpd
    use-tag: true
