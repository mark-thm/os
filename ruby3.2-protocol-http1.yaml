package:
  name: ruby3.2-protocol-http1
  version: 0.27.0
  epoch: 0
  description: A low level implementation of the HTTP/1 protocol.
  copyright:
    - license: MIT
  dependencies:
    runtime:
      - ruby-3.2
      - ruby3.2-protocol-http

environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - git
      - ruby-3.2
      - ruby-3.2-dev

vars:
  gem: protocol-http1

pipeline:
  - uses: git-checkout
    with:
      expected-commit: de343cc2afafb8a6fd3076ab4798f7cc54283565
      repository: https://github.com/socketry/protocol-http1
      tag: v${{package.version}}

  - uses: patch
    with:
      patches: 001-remove-signing-key.patch

  - uses: ruby/build
    with:
      gem: ${{vars.gem}}

  - uses: ruby/install
    with:
      gem: ${{vars.gem}}
      version: ${{package.version}}

  - uses: ruby/clean

update:
  enabled: true
  github:
    identifier: socketry/protocol-http1
    strip-prefix: v
    use-tag: true

test:
  pipeline:
    - runs: ruby -e "require 'protocol/http1'"
    - name: Simple HTTP1 test
      runs: |
        cat <<EOF > /tmp/test.rb
        require 'protocol/http1'

        # Simulating a basic HTTP connection using a custom stream class
        class FakeStream
          def initialize
            # Mock HTTP request lines
            @lines = [
              "GET / HTTP/1.1\r\n",  # Request line
              "Host: example.com\r\n",  # Host header
              "\r\n"  # End of headers
            ]
          end

          # Mimics reading lines from a stream, like a real network connection
          def gets(separator = "\r\n", chomp: true)
            return nil if @lines.empty?  # Simulates end of stream
            line = @lines.shift  # Get the next line
            chomp ? line.chomp(separator) : line  # Optionally remove the separator
          end
        end

        # Create a connection using the fake stream
        stream = FakeStream.new
        connection = Protocol::HTTP1::Connection.new(stream)

        # Read and parse the request, returns an array of request components
        request = connection.read_request

        # Extract and print the authority (host) from the request
        authority = request[0]
        puts authority  # Expected: "example.com"
        EOF
        ruby /tmp/test.rb
